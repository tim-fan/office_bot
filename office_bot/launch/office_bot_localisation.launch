<?xml version="1.0"?>

<!-- Main launch file for office bot in localisation mode
    Supports selection of localisation algorithm via input argument
 -->

<launch>
  <arg name="algorithm" default="amcl" doc="Name of localisation algorithm to run (amcl, cartographer, or tango)"/>
  <arg name="description_file" default="" doc="If provided, will publish the given urdf.xacro"/>
  
  <group if="$(eval algorithm == 'cartographer')">
      <node name="rviz" pkg="rviz" type="rviz" required="true"
          args="-d $(find office_bot)/cfg/cartographer_view.rviz" />

      <node name="cartographer_node" pkg="cartographer_ros"
          type="cartographer_node" args="
              -configuration_directory $(find office_bot)/cfg
              -configuration_basename office_bot_localisation.lua
              -load_state_filename $(find office_bot)/cfg/officeMap.pbstream"
          output="screen"/>
  </group>
  
  
  <group if="$(eval algorithm == 'amcl')">    
    <!-- running cartographer just as a laser-odometry source -->
    <node name="cartographer_node" pkg="cartographer_ros"
        type="cartographer_node" args="
            -configuration_directory $(find office_bot)/cfg
            -configuration_basename office_bot_odom.lua">
            <remap from="tf" to="carto_tf"/>
    </node>

    <node name="odom_filter" pkg="office_bot" type="odom_tf_passthrough.py" args="carto_tf tf"/>
      
    <node name="rviz" pkg="rviz" type="rviz" required="true"
        args="-d $(find office_bot)/cfg/amcl_view.rviz" />
        
    <node name="map_server" pkg="map_server" type="map_server"
        args="$(find office_bot)/cfg/officeMap.yaml"/>  
          
    <node name="amcl" pkg="amcl" type="amcl" respawn="true">
        <param name="base_frame_id" value="base_link"/>
    </node>

  </group>
  
  <group if="$(eval algorithm == 'tango')">
      <node name="rviz" pkg="rviz" type="rviz" required="true"
          args="-d $(find office_bot)/cfg/tango_ros.rviz" />

      <!-- the localisation algorithm runs on the tango. Just need to connect
           the published transforms to our tree -->
      <node name="map_to_area_tf_publisher" pkg="tf"
          type="static_transform_publisher" args="0 0 0 0 0 0 map area_description 100"/>
      <node name="device_to_base_link_tf_publisher" pkg="tf"
          type="static_transform_publisher" args="0 0 0 0 0 0 device base_link 100"/>
  </group>
  
  <param if="$(eval description_file != '')" name="robot_description" command="$(find xacro)/xacro --inorder '$(arg description_file)'" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  
</launch>
